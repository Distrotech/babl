<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<!-- The babl webpage is partially autogenerated
-->
<html>
  <head>
    <title>babl-@BABL_VERSION@</title>

    <link rel="icon" href="graphics/babl-16x16.png" type="image/png" />
    <link rel="shortcut icon" href="graphics/babl-16x16.png" type="image/png" />
    
    <style type='text/css'>
       @import url(babl.css);
    </style>

    <script type='text/javascript'>
    function hide(id)
    {
      (document.getElementById(id)).style.display = "none";
    }
    function show(id)
    {
      (document.getElementById(id)).style.display = "block";
    }
    function get_visible (id)
    {
      var element = document.getElementById(id);

      if (element &&
          element.style.display &&
          element.style.display != "none")
         return true;
      return false;
    }
    function set_visible (id, visible)
    {
      var element = document.getElementById(id);

      if (element)
        {
          if (visible)
              element.style.display = "block";
          else
              element.style.display = "none";
        }
    }
    function toggle_visible (id)
    {
      if (get_visible(id))
        set_visible(id, false);
      else
        set_visible(id,true);
    }
    </script>
  </head>
  <body>

    <div class='print'>
      <div class='print_title'>
        <h1>Babl-@BABL_VERSION@</h1>
      </div>
    </div>

    <div class='toc'>
      <div class='print'>
         <h3>Contents</h3>
      </div>
      <ul>
        <li><a href='#Babl'>Babl</a></li>
        <li><a href='#NEWS'>News</a></li>
        <li><a href='#Background'>Background</a></li>
        <li><a href='#How'>How?</a></li>
        <li><a href='#Features'>Features</a></li>
        <li><a href='#Vocabulary'>Vocabulary</a></li>
        <li><a href='#Data-types'>&nbsp;&nbsp;Data types</a></li>
        <li><a href='#Color-models'>&nbsp;&nbsp;Color models</a></li>
        <li><a href='#Pixel-formats'>&nbsp;&nbsp;Pixel formats</a></li>
        <li><a href='#Extensions'>Extensions</a></li>
        <li><a href='#Dependencies'>Dependencies</a></li>
        <li><a href='#Download'>Download</a></li>
        <li><a href='#Subversion'>SVN</a></li>
        <li><a href='#Usage'>Usage</a></li>
        <li><a href='#Extending'>Extending</a></li>
        <li><a href='#ColorManagement'>Color Management</a></li>
        <li><a href='#TODO'>Todo</a></li>
        <li><a href='#Copyright'>Copyright</a></li>
        <li><a href='#Authors'>&nbsp;&nbsp;Authors</a></li>
      </ul>
    </div>

<a name='Babl'></a>
    <div class='paper'>
  <div class='content'>

    <!--<h1>Babl</h1>-->
    <p>Babl is a <em>dynamic, any to any, pixel format conversion
      library</em>. It provides conversions between the myriad of buffer
    types images can be stored in. Babl doesn't only help with existing
    pixel formats, but also facilitates creation of new and uncommon
    ones.</p>

    <a name='NEWS'></a>
    <h2>News</h2>
<!--
<!--NEWS-->
-->
    <p>See the <a href='http://svn.gnome.org/viewcvs/babl/trunk/ChangeLog?view=markup'>ChangeLog in Subversion</a>.</p>

    <a name='Background'></a>
    <h2>Background</h2>
    <p> When creating various libraries and small tools that deal with
    computer graphics I have often created functions for converting
    raster images between different representations.
    </p>

    <p>Libraries to help with such conversions already do exist, but no
    extendable candidates have surfaced in my searches.
    </p>

    <p>The vocabulary developed in babl will most likely be part of
    <a href='http://www.gegl.org/'>GEGL</a>'s vocabulary to describe image
    buffers.
    </p>

    <a name='How'></a>
    <h2>How babl works</h2>
    <p>When using BablFishes to do your conversions, you request a fish to
    convert between two formats, and an optimal fish to babls capability is
    provided that you can use to do your conversions. Babl also provides
    the capability to describe new formats based on a vocabulary of user
    registered color models and data types.
    </p>

    <p>Babl provides a base vocabulary in BablBase and some extensions
    that are thought to be generally useful.</p>

    <p>When performing further extensions to the vocabulary of babl, the
    internal consistency is governed by reference conversions that operate
    on <em>double</em> (64 bit floating point values). The only color model
    created during BablCore bootstrap is <em>RGBA</em> (linear light RGB,
    0.0 - 1.0, with a linear 0.0 - 1.0 opacity channel) backed by
    the <em>double</em> datatype.
    </p>

    <p>If babls conversion isn't fast enough, you can provide
    your own conversion shortcut between two formats. The registered
    shortcut might also be used by babl as an intermediate conversion when
    constructing BablFishes for other conversions.
    </p>

    <p>Babl extensions are shared objects. If you have already developed
    some fast conversion functions, wrapping them as babl extensions should
    not take much time and will speed up babl for other users as well.
    </p>

    <a name='Features'></a>
    <h2>Features</h2>

    <h3>Core</h3>
    <ul>
      <li class='frozen'>Small API for simple use cases</li>
      <li class='stable'>Planar and linear buffers</li>
      <li class='stable'>Thread safety for processing.</li>
      <li class='unstable'>Extendable and <a href='http://pippin.gimp.org/babl/introspect.txt'>introspectable</a> formats,
      color models, components and datatypes</li>
      <li class='unstable'>Reference 64bit floating point conversions for
      data types and color models.</li>
    </ul>

    <a name='Vocabulary'></a>
    <h3 style='margin-bottom:0em;'>Vocabulary</h3>
<!--BablBase-->
    
    <a name='Extensions'></a>
    <h3>Extensions</h3>
    <p>
    At compile, load, and runtime; babl is extendable with:
    </p>
    <ul>
      <li>data types.</li>
      <li>color models.</li>
      <li>pixel formats.</li>
      <li>optimized conversion functions:
      <dl>
        <dt>SIMD instructions</dt>
        <dd>MMX, SSE, Altivec ...</dd>
        <dt>External libraries</dd>
        <dd>liboil, hermes, libavcodec, lcms, ...</li>
      </dl>
      </li>
    </ul>

    <h3>Shortcut coverage</h3>
    <p>The diagram shown below visualizes the coverage of current shortcut
    conversions. A <a href='BablFishPath.html'>DHTML version</a> is also available.
    </p>
<pre style='font-size:50%;height:30em;overflow:scroll'>
<!--BablFishPath-->
</pre>

    <a name='Dependencies'></a>
    <h2>Dependencies</h2>

    <p> Babl is intended to be a low level infrastructure library and thus
    strives for few dependencies and thus portability. </p>

    <ul>
      <li>libdl (for loading extensions, babl is also reported to work on win32)</li>
    </ul>

    <a name='Download'></a>
    <h2>Download</h2>

    <p>The latest versioned development version of babl can be found in
    <a href='ftp://ftp.gtk.org/pub/babl/'>ftp://ftp.gtk.org/pub/babl/</a>.
    </p>

    <a name='Subversion'></a>
    <h2>Subversion</h2>

    <p>
    The latest development version is available in <a href='http://svn.gnome.org/viewcvs/gegl/trunk/ChangeLog?view=markup'>the babl module in GNOME Subversion</a>.
    </p>
    <!--
    <div class='screen'>
      <p>You can also <a href='source-local.html'>browse the source</a> for
      the version this website was built. </p>
    </div>
        -->

        <a name='Usage'></a>
        <h2>Usage</h2>

        <p>The simplest scenario for using babl is converting between linear
        buffers represented by an existing BablPixelFormat.
        </p>
        <pre
><span class='function'>babl_process</span> <span class='paren'>(</span><span class='function'>babl_fish</span> <span class='paren'>(</span><span class='string'>"srgb"</span>, <span class='string'>"CIE Lab float"</span><span class='paren'>)</span>,
              srgb_buffer, lab_buffer,
              pixel_count<span class='paren'>);</span></pre>
        
        <p>If the existing pixel formats are not sufficient for your conversion
        needs, new ones can be created on the fly. The constructor
        will provide the prior created one if duplicates are registered. </p>
        <pre
><span class='function'>babl_format_new</span> <span class='paren'>(</span><span class='function'>babl_model</span> <span class='paren'>(</span><span class='string'>"R'G'B'"</span><span class='paren'>)</span>,
                 <span class='function'>babl_type</span> <span class='paren'>(</span><span class='string'>"u8"</span><span class='paren'>)</span>,
                 <span class='function'>babl_component</span> <span class='paren'>(</span><span class='string'>"B'"</span><span class='paren'>)</span>,
                 <span class='function'>babl_component</span> <span class='paren'>(</span><span class='string'>"G'"</span><span class='paren'>)</span>,
                 <span class='function'>babl_component</span> <span class='paren'>(</span><span class='string'>"R'"</span><span class='paren'>)</span>,
                 <span class='NULL'>NULL</span><span class='paren'>);</span></pre>
<!--
        <p>Instead of a linear buffer you can an image descriptor which desribes the start of the memory segment, the pitch in bytes between samples, and the rowstride (not used yet,
        use 0 to indicate unlimited for compatibility with future API.)
        </p>
        <pre
><span class='function'>babl_process</span> <span class='paren'>(</span><span class='function'>babl_fish</span> <span class='paren'>(</span><span class='string'>"srgb"</span>, <span class='string'>"Y'CbCr u8"</span><span class='paren'>)</span>,
              srgb_buffer,
              <span class='function'>babl_image</span> <span class='paren'>(</span><span class='function'><span class='string'>"Y'"</span>, luma_buffer, 1, 0,
                          <span class='string'>"Cb"</span>, cb_buffer,   1, 0,
                          <span class='string'>"Cr"</span>, cr_buffer,   1, 0,
                          <span class='NULL'>NULL</span><span class='paren'>)</span>,
                          pixel_count<span class='paren'>);</span>
</pre>
-->

        <a name='Extending'></a>
        <h2>Extending</h2>
        
        <p>For samples of how the current internal API specification of
        data types, color models, and conversions look in the <tt>extensions/</tt>
        directory. The tables in this HTML file is directly generated
        based on the data registered by BablCore (double and RGBA), BablBase (core datatypes, and RGB models), 
        extensions (CIE Lab, naive CMYK, various shortcut conversions). The API's used are very
        similar in style to the API's described under the <a href='#Usage'>Usage section</a>.
        </p>

        <a name='ColorManagement'></a>
        <h2>Color Management</h2>
        <p> Babl is not a color management system, since it doesn't deal with
        ICC profiles. Babl is designed primarily for internal use when the
        color space is already known (sRGB, CIE Lab, Luminance or similar).</p>

        <p>
        It is also possible to register new color models that are managed by a
        color management system like <em>lcms</em>, take a look at the <em>lcms-lab</em>
        extensions for an example.</p>

        <a name='TODO'></a>
        <h2>TODO</h2>
        
        <ul>
          <li>Validate that a created BablFishPath is actually faster than the
          BablFishReference it is a replacement for.</li>
          <li>Compile-time instead of runtime profiling / storage of profiling
          and loss data.. <em>(The speed of conversions
            is bound to 'wobble', according to architecture, compiler flags,
            concurrently running processes and phase of moon.)</em></li>
          <li class='unstable'>Horizontal chroma subsampling (4:2:2 and 4:1:1)</li>
          <li>Thread safety (locking) for mutations of the type system.</li>
          <li>Support for datatypes that are not a multiple of 8bit.</li>
          <li>dithering</li>
        </ul>

        <a name='Copyright'></a>
        <h2>Copyright</h2>

        <p> Babl is free software; you can redistribute it and/or modify it
        under the terms of the <a href='LGPL'>GNU Lesser General Public
          License</a> as published by the Free Software Foundation; either
        version 2 of the License, or (at your option) any later version. </p>

        <a name='Authors'></a>
        <h3>Authors</h3>

<!--AUTHORS-->          
     
        <a href='graphics/index.html'><img class='BablFish' alt='/babl-@BABL_VERSION@' title='babl-@BABL_VERSION@' src='graphics/babl-48x48.png'/></a>
      </div>
    </div>
    <div class='graphic'>
      <div class='print'>
        <img src='graphics/babl-a4poster.png' alt=' '/>
      </div>
    </div>

  </body>
</html>
