<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<!-- The babl webpage is partially autogenerated
-->
<html>
  <head>
    <title>babl-@BABL_VERSION@</title>

    <link rel="icon" href="graphics/babl-16x16.png" type="image/png" />
    <link rel="shortcut icon" href="graphics/babl-16x16.png" type="image/png" />
    
    <style type='text/css'>
       @import url(babl.css);
    </style>
  </head>
  <body>

    <div class='print'>
      <div class='print_title'>
        <h1>Babl-@BABL_VERSION@</h1>
      </div>
    </div>

    <div class='toc'>
      <div class='print'>
         <h3>Contents</h3>
      </div>
      <ul>
        <li><a href='#About'>About</a></li>
        <li><a href='#NEWS'>News</a></li>
        <li><a href='#Features'>Features</a></li>
        <li><a href='#Data-types'>&nbsp;&nbsp;Data types</a></li>
        <li><a href='#Color-models'>&nbsp;&nbsp;Color models</a></li>
        <li><a href='#Pixel-formats'>&nbsp;&nbsp;Pixel formats</a></li>
        <li><a href='#Dependencies'>Dependencies</a></li>
        <li><a href='#Dependencies-Core'>&nbsp;&nbsp;Core</a></li>
        <li><a href='#Dependencies-Extensions'>&nbsp;&nbsp;Extensions</a></li>
        <li><a href='#Source'>Source</a></li>
        <li><a href='#Usage'>Usage</a></li>
        <li><a href='#Extending'>Extending</a></li>
        <li><a href='#TODO'>TODO</a></li>
        <li><a href='#TODO-Core'>&nbsp;&nbsp;Core</a></li>
        <li><a href='#TODO-Extensions'>&nbsp;&nbsp;Extensions</a></li>
        <li><a href='#Copyright'>Copyright</a></li>
        <li><a href='#Authors'>&nbsp;&nbsp;Authors</a></li>
      </ul>
    </div>

    <a name='About'></a>
    <div class='paper'>
      <div class='content'>

        <h2>About</h2>
        <p>Babl is a <em>dynamic, any to any, pixel format conversion
          library</em> It provides conversions between the myriad of buffer
        types images can be stored in. Babl doesn't only help with existing
        pixel formats, but also facilitates creation of new and uncommon
        ones.</p>

        <a name='NEWS'></a>
        <h2>News</h2>
<!--NEWS-->

        <a name='Features'></a>
        <h2>Features</h2>

        <h3>Core</h3>
        <ul>
          <li class='frozen'>Small API for simple use cases</li>
          <li class='stable'>Specification of new formats</li>
          <li class='stable'>Planar and linear buffers</li>
          <li class='stable'>Thread safety for processing.</li>

          <li class='unstable'>Extension and introspection of formats,
          color models, components and datatypes</li>
          <li class='unstable'>Horizontal an vertical subsampling (for
          implementing 4:2:2 4:2:0 4:1:1 etc. chroma subsampling)</li>
          <li class='unstable'>Reference 64bit floating point conversions for data types and color models.
          
          <p><em>Note:</em> This portion of babl has still not received rigorous
          testing, the main development of babl is still focused on internal
          infrastructure work. As the development of babl allows, initial tests
          and usage of babl is welcome; as it would help kill of random
          mystypes in constants and such earlier, and make it a more valid
          actual regression suite.
          </p>
<!--BablBase-->
          </li>
        </ul>

        <h3>Extensions</h3>
        <p>
        At compile, load and runtime; babl is extendable with:
        </p>
        <ul>
          <li>data  types.</li>
          <li>color models.</li>
          <li>pixel formats.</li>
          <li>optimized conversion functions:
          <dl>
            <dt>SIMD instructions</dt>
            <dd>MMX, SSE, Altivec ...</dd>
            <dt>External libraries</dd>
            <dd>liboil, hermes, libavcodec, lcms, ...</li>
          </dl>
          </li>
        </ul>
        <p>
        The extension api is not going to be frozen until after the 1.0 release.
        </p>


        <a name='Dependencies'></a>
        <h2>Dependencies</h2>

        <p> Babl is intended to be a low level infrastructure library and thus
        strives for few dependencies and thus portability. </p>

        <a name='Dependencies-Core'></a>
        <h3>Core</h3>
        <ul>
          <li>The C Standard library.</li>
        </ul>

        <a name='Dependencies-Extensions'></a>
        <h3>Extensions</h3>
        <ul>
          <li>libdl - dynamic modules. (planned)</li>
        </ul>


        <a name='Source'></a>
        <h2>Source</h2>

        <p>
        The latest development version is available in <a href='http://cvs.gnome.org/viewcvs/babl/'>the babl module in GNOME CVS</a>.
        </p>
        <!--
        <div class='screen'>
          <p>You can also <a href='source-local.html'>browse the source</a> for
          the version this website was built. </p>
        </div>
        -->

        <a name='Usage'></a>
        <h2>Usage</h2>

        <p>The simplest scenario for using babl is converting between linear
        buffers represented by an existing BablPixelFormat.
        </p>
        <pre
><span class='function'>babl_process</span> <span class='paren'>(</span><span class='function'>babl_fish</span> <span class='paren'>(</span><span class='string'>"srgb"</span>, <span class='string'>"lab-float"</span><span class='paren'>)</span>,
              srgb_buffer, lab_buffer,
              pixel_count<span class='paren'>);</span></pre>
        
        <p>If the existing pixel formats are not sufficient for your conversion
        needs, new ones can be created and named on the fly. The constructor
        will provide the prior created one if duplicates are registered. </p>
        <pre
><span class='function'>babl_format_new</span> <span class='paren'>(</span><span class='string'>"bgr-u8"</span>,
                 <span class='function'>babl_model</span> <span class='paren'>(</span><span class='string'>"rgb"</span><span class='paren'>)</span>,
                 <span class='function'>babl_type</span> <span class='paren'>(</span><span class='string'>"u8"</span><span class='paren'>)</span>,
                 <span class='function'>babl_component</span> <span class='paren'>(</span><span class='string'>"B"</span><span class='paren'>)</span>,
                 <span class='function'>babl_component</span> <span class='paren'>(</span><span class='string'>"G"</span><span class='paren'>)</span>,
                 <span class='function'>babl_component</span> <span class='paren'>(</span><span class='string'>"R"</span><span class='paren'>)</span>,
                 <span class='NULL'>NULL</span><span class='paren'>);</span></pre>

        <p>Instead of a linear buffer you can an image descriptor which desribes the start of the memory segment, the pitch in bytes between samples, and the rowstride (optionally 0 for unlimited).
        </p>
        <pre
><span class='function'>babl_process</span> <span class='paren'>(</span><span class='function'>babl_fish</span> <span class='paren'>(</span><span class='string'>"srgb"</span>, <span class='string'>"y'cbcr420p"</span><span class='paren'>)</span>,
              srgb_buffer,
              <span class='function'>babl_image</span> <span class='paren'>(</span><span class='function'><span class='string'>"Y'"</span>, luma_buffer, 1, 0,
                          <span class='string'>"Cb"</span>, cb_buffer,  1, 0,
                          <span class='string'>"Cr"</span>, cr_buffer,  1, 0,
                          <span class='NULL'>NULL</span><span class='paren'>);</span>
</pre>

        <p>For more code samples look in the tests directory.</p>
        
        <a name='Extending'></a>
        <h2>Extending</h2>
        
        <p>For samples of how the current internal api of specification of
        data types, color models, and conversions look in the babl/base/
        directory. The tables in this HTML file is directly generated
        based on the data registered by BablBase. The API's used are very
        similar in style to the API's described under the <a href='#Usage'>Usage section</a>.
        </p>

        <p>For now, the only way to extend babl is from the application
        using the library, by structuring your code in a similar fashion
        to BablBase it should be easier to later turn it into a loadable
        module.
        </p>
        
        <a name='TODO'></a>
        <a name='TODO-Core'></a>
        <h2>TODO</h2>
        
        <h3>Core</h3>
        <ul>
          <li>Meta level optimizations.</li>
          <li>Compile and/or runtime profiling. <em>(The speed of conversions
            is bound to 'wobble', according to architecture, compiler flags,
            concurrently running processes and phase of moon.)</em></li>
          <li>Subsampling support</li>
          <li>Mixed BablTypes in BablPixelFormats</li>
          <li>Support for datatypes that are not a multiple of 8bit.</li>
          <li>Ref-counting for BablImages</li>
          <li>Thread safety for mutations of the type system.</li>
          <!--<li>Relative error is the difference between the two vaues
          divided by the actual value, for instance, if the actual result of a
          calculation should be 3.13159, but the result obtained was 3.14x10^0,
          the relative error is 0.00159/3.14159 => 0.0005 (source: 'A new book
          on c (cook1_0a.pdf)')</li>-->
        </ul>

        <a name='TODO-Extensions'></a>
        <h3>Extensions</h3>
        <ul>
          <li>Dynamic modules
          babl will probably look in a colon
          seperated list of paths to search sequentially for modules. 
          The default assumed value is
          <pre>BABL_PATH="/usr/lib/babl/:/usr/local/lib/babl:(HOME)/.local/lib/babl:$(HOME)/lib/babl".
          </pre>
          NB: the modules will be loaded from the directories pointed to by
          the path in reverse order, this should allow the user to override
          system wide definitions for types, models and formats.
          </li>
        </ul>



        <a name='Copyright'></a>
        <h2>Copyright</h2>

        <p> Babl is free software; you can redistribute it and/or modify it
        under the terms of the <a href='LGPL'>GNU Lesser General Public
          License</a> as published by the Free Software Foundation; either
        version 2 of the License, or (at your option) any later version. </p>

        <a name='Authors'></a>
        <h3>Authors</h3>

        <dl>
          <dt>Maintainer:</dt>
          <dd><a href='http://pippin.gimp.org/'>Øyvind Kolås</a></dd>
          <dt>Original author:</dt>
          <dd>Øyvind Kolås</dd>
          <dt>Contributors:<dt>
<dd><pre class='authors'><!--AUTHORS-->          
</pre></dd>
        </dl>
     
        <a href='graphics/index.html'><img class='BablFish' alt='/babl-@BABL_VERSION@' title='babl-@BABL_VERSION@' src='graphics/babl-48x48.png'/></a>
      </div>
    </div>
    <div class='graphic'>
      <div class='print'>
        <img src='graphics/babl-a4poster.png' alt=' '/>
      </div>
    </div>

  </body>
</html>
